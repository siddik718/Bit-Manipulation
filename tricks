1.Divide x by 2^i.
  x = x >> i. // x/2^i.
  ex: 48 >> 3.// 48/2^3.
    = 6.
 
2.Multiple x by 2^i.
  x = x << i. x*2^i.
  ex: 6 << 3 // 6*2^3.
   =  48.

3. Check if a number is divisible by 2^i.
 x & ( ( 1 << (i+1)) - 1 ) == 0
ex: (28 % 2^1 == 0)
  = 28 & ((1 << (1+1)) - 1) == 0
  = 28 & (4 - 1) == 0
  = 28 & 3 == 0 // (11100)2 & (00011)2 == 0.
  = 0 == 0
  
 4. Find remainder of x with 2 ^ i. 
  x & ((1 << i) - 1 )
 ex: 27 % 2^3 = ?
   = 27 & ((1 << 3) - 1)
   = 27 & (8 - 1)
   = 27 & 7
   = 3.
  
  5. n = odd or even ?.
     if : (n&1 == 1)
        odd
    else
        even
        
  6.Check if a number is a power of 2. // 2^? = n.
    if : ((!(n) & (n - 1) ) && (n != 0)
              yes.
    else
              no.
  7. Maximum x that is power of 2 and divides n. (n%2^x == 0)
    x = (n & (~(n - 1)))
    x = (n & -n) // 2's compliment
    ex: 20 % 2^?.
    
    = 20 & (~(20 - 1))
    = 20 & (~19)
    = 20 & (- (19+1))
    = 20 & -20.
    = 4.
  
  8. Count the number of ones in the binary representation of the given number.
  implementation: O(k) where k is the number of one in the number.
   int conut_one (int n)
   {
   int count = 0;
    while(n)
    {
     n = n&(n-1);
     count++;
    }
   return count;
   }
  
 9.How to generate all the possible subsets of a set ?
 
 A big advantage of bit manipulation is that it can help to iterate over all the subsets of an N-element set. 
 As we all know there are 2N possible subsets of any given set with N elements. 
 What if we represent each element in a subset with a bit. 
 A bit can be either 0 or 1, thus we can use this to denote whether the corresponding element belongs to this given subset or not.
 So each bit pattern will represent a subset.

Consider a set A of 3 elements.
A = {a, b, c}

Now, we need 3 bits, one bit for each element.
1 represent that the corresponding element is present in the subset, whereas 0 represent the corresponding element is not in the subset.
Let’s write all the possible combination of these 3 bits.

0 = (000)2 = {}
1 = (001)2 = {c}
2 = (010)2 = {b}
3 = (011)2 = {b, c}
4 = (100)2 = {a}
5 = (101)2 = {a, c}
6 = (110)2 = {a, b}
7 = (111)2 = {a, b, c}

 pseudo:
      possibleSubsets(A, N):
        for i = 0 to 2^N:
            for j = 0 to N:
                if jth bit is set in i:
                    print A[j]
            print ‘\n’
            
 
 code:
 void possibleSubsets(char A[], int N)
    {
        for(int i = 0;i < (1 << N); ++i)
        {
            for(int j = 0;j < N;++j)
                if(i & (1 << j))
                    cout << A[j] << ‘ ‘;
            cout << endl;
    }
    }
    
 Tricks with Bits:
 
